// –ö–Ω–æ–ø–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
const verifyBtn = document.getElementById('verifyBtn');
const video = document.getElementById('video');
const canvas = document.getElementById('canvas');
const verifyResult = document.getElementById('verifyResult');

verifyBtn.addEventListener('click', async () => {
  try {
    const stream = await navigator.mediaDevices.getUserMedia({ video:true, audio:false });
    video.srcObject = stream;
    video.style.display = 'block';

    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å—ä–µ–º–∫–∏ —Ñ–æ—Ç–æ
    const captureBtn = document.createElement('button');
    captureBtn.innerText = 'üì∏ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ';
    document.body.appendChild(captureBtn);

    captureBtn.addEventListener('click', async () => {
      const context = canvas.getContext('2d');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      context.drawImage(video, 0, 0, canvas.width, canvas.height);

      const dataUrl = canvas.toDataURL('image/png');

      const response = await fetch('/upload', {
        method: 'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({ image: dataUrl })
      });

      if(response.ok){
        verifyResult.innerHTML = "<p>–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ</p>";
      } else {
        verifyResult.innerHTML = "<p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ‚ùå</p>";
      }
    });

  } catch(err) {
    alert('–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏!');
  }
});